#已经是可运行代码
import matplotlib.pyplot as plt
%matplotlib inline    
#需要加上这一行才能看到可视化，并且这一行中的后面不能写注释
decisionNode = dict(boxstyle="sawtooth", fc="0.8")
leafNode = dict(boxstyle="round4", fc="0.8")
arrow_args = dict(arrowstyle="<-")

def plotNode(nodeTxt, centerPt, parentPt, nodeType):
    createPlot.ax1.annotate(nodeTxt, xy=parentPt, xycoords="axes fraction", xytext=centerPt, textcoords="axes fraction",
                            va="center", ha="center", bbox=nodeType, arrowprops=arrow_args)

def createPlot():
    fig = plt.figure(1, facecolor="white")
    fig.clf()
    createPlot.ax1 = plt.subplot(111, frameon=False)
    plotNode("决策节点", (0.5, 0.1), (0.1, 0.5), decisionNode)
    plotNode("叶节点", (0.8, 0.1), (0.3, 0.8), leafNode)
    plt.show()

if  __name__=="__main__":
    createPlot()

####以下代码未经调试
def getNumLeafs(myTree):   #获取叶节点的数目
    numLeafs=0
    firstStr=myTree.keys()[0]  #根节点赋给第一个值，可以理解为将整个树结构赋值，因为从根节点就可以遍历整个树结构
    secondDict=myTree[firstStr]  #根节点的值赋给的第二个值
    for key  in secondDict.keys():
        if type(secondDict[key]).__name__=="dict":
            numLeafs+=getNumLeafs(secondDict[key])   #递归求深度
        else:
            numLeafs+=1
            return numLeafs

def getTreeDepth(myTree):
    maxDepth=0
    firstStr=myTree.keys()[0]   #将传入的字典结构的树赋给根节点
    secondDict=myTree[firstStr]
    for key in secondDict.keys(): #这儿的key很关键，其实key是可以检索左右子树的，因为seconddict的keys可能有多个，即树有多个分支
        if type(secondDict[key]).__name__=="dict":
            thisDepth=1+getTreeDepth(secondDict[key])
        else:
            thisDepth=1
        if thisDepth>maxDepth:
            maxDepth=thisDepth
    return maxDepth

def plotMidText(cntrPt,parentPt,txtString):   #在父子节点间填充文本信息
    xMid=(parentPt[0]-cntrPt[0])/2+cntrPt[0]
    yMid=(parentPt[1]-cntrPt[1])/2+cntrPt[1]
    createPlot.ax1.text(xMid,yMid,txtString)

def plotTree(myTree,parentPt,nodeTxt):  #划分树,这个函数涉及的内容还不是很懂
    numLeafs=getNumLeafs(myTree)
    depth=getTreeDepth(myTree)
    firstStr=myTree.keys()[0]
    cntrPt=(plotTree.xoff+(1+float(numLeafs))/2/plotTree.totalW,plotTree.yoff)
    plotMidText(cntrPt,parentPt,nodeTxt)
    plotNode(firstStr,cntrPt,parentPt,decisionNode)
    secondDict=myTree[firstStr]
    plotTree.yoff=plotTree.yoff-1/plotTree.totalD
    for key in secondDict.keys():
        if type(secondDict[key]).__name__=="dict":
            plotTree(secondDict[key],cntrPt,str(key))
        else:
            plotTree.xoff=plotTree.xoff+1/plotTree.totalW
            plotNode(secondDict[key],(plotTree,xoff,plotTree.yoff),cntrPt,leafNode)
            plotMidText((plotTree.xoff,plotTree.yoff),cntrPt,str(key))
    plotTree.yoff=plotTree.yoff+1/plotTree.totalD

def createPlot(inTree):#    很多知识，需要具体操作实现才明白
    fig=plt.figure(1,facecolor="white")
    fig.clf()
    axprops=dict(xticks=[],ytick=[])
    createPlot.ax1=plt.subplot(111,frameon=False,**axprops)
    plotTree.totalW=float(getNumLeafs(inTree))
    plotTree.totalD=float(getTreeDepth(inTree))
    plotTree.xoff=-0.5/plotTree.totalW
    plotTree.yoff=1
    plotTree(inTree,(0.5,1),'')
    plt.show()
