#决策树算法
from math import log
def calcShannonEnt(dataset):#计算香农熵
   numEntries=len(dataset)
   labelCounts={}
   for featVec in dataset:
       currentLabel=featVec[-1]
       if currentLabel not in labelCounts.keys():
          labelCounts[currentLabel]=0
       labelCounts[currentLabel]+=1
   shannonEnt=0
   for key in labelCounts:   #labelcounts是键值对的健的集合
      prob=float(labelCounts[key])/numEntries
      shannonEnt-=prob*log(prob,2)
   return shannoEnt

def creatDataSet():
   dataSet=[[1,2,'yes'],
            [1,1,'yes'],
            [1,0,'no'],
            [0,1,'no'],
            [0,1,'no']]
  labels=['no surfacing','flippers']
  return dataSet,labels

def splitDataSet(dataset,axis,value):    #按照给定特征值对数据进行划分
    retDataSet=[]
    for featVec in dataset:
       if featVec[axis]==value:
         reduceFeatVec=featVec[:axis]   #其实这里是删除了axis列的数据并返回数据到retdataset
         reduceFeatVec.extend(featVec[axis+1:]
         retDataSet.append(reduceFeatVec)
    return retDataSet

def chooseBestFeatureToSpit(dataSet):
     numFeatures=len(dataSet[0])-1
     baseEntropy=calcShannonEnt(dataSet)
     bestInfoGain=0
     bestFeature=-1
     for i in range(numFeatures):
        featList=[example[i]  for example  in dataSet]
        uniqueVals=set(feaList)    #这儿的理解有点复杂
        newEntropy=0
        for value in uniqueVals：
           subDataSet=splitDataSet(dataSet,i,value)
           prob=len(subDataSet)/float(len(dataSet))
           newEntropy+=prob*calcShannonEnt(subDataSet)
        infoGain=baseEntropy-newEntropy
        if(infoGain>bestInfoGain): 
          bestInfoGain=infoGain
          bestFeature=i
      return bestFeature

def majorityCnt(classList):   #返回出现次数最多的分类特征
    classCount={}               #和KNN算法中的那个函数很类似，亮点在for循环和最后的排序输出即为最多的标签
    for vote in classList:
        if vote not in classList.keys():
            classCount[vote]=0
        classCount[vote]+=1
      sortedClassCount=sorted(classCount.iteritems(),key=operator.itemgetter(1),reverse=True)
      return sortedClassCount[0][0]




def createTree(dataSet,labels):
    classList=[example[-1] for example in dataSet]   #取出最后一列即labels
    if classList.count(classList[0])==len(classList) #即所有元素都一样  label都一样则返回这个label
         return classList[0]
    if len(dataSet[0])==1:    #数据集遍历完所有的特征    不是很理解
         return majorityCnt(classList)  #返回classList中最多的分类标签
    bestFeat=chooseBestFeatureTosplit(dataSet)    #此处为返回划分的最佳特征的索引值
    myTree={bestFeatLabel:{}}    #这儿理解为建立根节点依次开始生长
    del(labels[bestFeat])
    featValues=[example[bestFeat] for   example in dataSet]   #按索引找到最佳划分特征
    uniqueVals=set(featValues)
    for value in uniquaVals:
       subLabels=labels[:]    #递归建立树，很经典的代码
       myTree[bestFeatlabel][value]=createTree(splitDataSet(dataSet,bestFeat,value),subLabels)   
    return myTree
def  classify(inputTree,featLabels,testVec):  #递归将inputTree进行分类，返回分类标签
    firstStr=inputTree.keys()[0]
    secondDict=inputTree[firstStr]
    featIndex=featLabels.index(firstStr)  #使用了index方法查找列表中第一个匹配firstStr的元素
    for key in secondDict.keys():
        if testVec[featIndex]==key:
            if type(secondDict[key]).__name__=="dict":
                classLabel=classify(secondDict[key],featLabels,testVec)   #仅仅需要在递归入口改变inputTree
            else:# 即数据对应字典，而labels和测试向量无需改变
                classLabel=secondDict[key]
    return classLabel

def storeTree(inputTree,filename):
    import pickle
    fw=open(filename,'w')
    pickle.dump(inputTree,fw)
    fw.close()

def grabTree(filename):
    import  pickle
    fr=open(filename)
    return pickle.load(fr)


