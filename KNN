def loadDataSet(): #词表到向量的转化函数
    postingList=[['my','dog','has','flea','problem','help','please'],
                 ['maybe','not','take','him','to','dog','park','stupid'],
                 ['my','dalmation','is','so','cute','I','love','him'],
                 ['stop','posting','stupid','worthless','garbage'],
                 ['mr','licks','ate','my','steak','how','to','stop','him'],
                 ['quit','buying','worthless','dog','food','stupid']]
    classVec=[0,1,0,1,0,1]
    return postingList,classVec
def createVocaList(dataSet):
    vocabSet=set([])
    for document in dataSet:
        vocabSet=vocabSet|set(document)  #创建两个集合的并集并返回
    return list(vocabSet)

def setOfWords2Vec(vocabList,inputSet):
    returnVec=[0]*len(vocabList)  #创建一个其中都是0的向量
    for word in inputSet:
        if word in vocabList:
            returnVec[vocabList.index(word)]=1
        else:
            print("the word:%s is not in my Vocabulary!"%word)
    return returnVec

listOposts,listClasses=loadDataSet()
myvocablist=createVocaList(listOposts)
print(setOfWords2Vec(myvocablist,['fuck','him']))

def trainNB0(trainMatrix,trainCategory):
    numTrainDocs=len(trainMatrix)
    numWords=len(trainMatrix[0])
    pAbusive=sum(trainCategory)/float(numTrainDocs)
    p0Num=ones(numWords)
    p1Num=ones(numWords)
    p0Denom=2
    p1Denom=2
    for i in range(numTrainDocs):
        if trainCategory[i]==1:
            p1Num+=trainMatrix[i]
            p1Denom+=sum(trainMatrix[i])
        else:
            p0Num+=trainMatrix[i]
            p0Denom+=sum(trainMatrix[i])
    p1Vect=log(p1Num/p1Denom)
    p0Vect=log(p0Num/p0Denom)
    return p0Vect,p1Vect,pAbusive

from numpy import*
trainMat=[]
for postinDoc in listOposts:
    trainMat.append(setOfWords2Vec(myvocablist,postinDoc))
p0V,p1V,pAb=trainNB0(trainMat,listClasses)
print("-------------\n")
print(pAb)
print("-------------\n")
print(p0V)
print("-------------\n")
print(p1V)

def classifyNB(vect2Classify,p0Vec,p1Vec,pClass1):
    p1=sum(vect2Classify*p1Vec)+log(pClass1)
    p0=sum(vect2Classify*p0Vec)+log(pClass1)
    if p1>p0:
        return 1
    else:
        return 0

def testingNB():
    list
